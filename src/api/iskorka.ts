/**
 * Generated by orval v6.5.3 üç∫
 * Do not edit manually.
 * API –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä "–ò—Å–∫–æ—Ä–∫–∞"
 * API –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä "–ò—Å–∫–æ—Ä–∫–∞"
 * OpenAPI spec version: 1.0.0
 */
import axios,{
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  FreeSpaceResponse,
  GetFreeSpaceParams,
  CancelReservationResponse,
  DeleteCancelReservationParams,
  BookingPlaceResponse,
  PutChangeSessionTimeBody,
  PostBookingPlaceBody
} from './model'
import {
  rest
} from 'msw'
import faker from 'faker'


// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ —Å–µ–∞–Ω—Å
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç
 */
export const getFreeSpace = (
    params?: GetFreeSpaceParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<FreeSpaceResponse>> => {
    return axios.get(
      `/freeSpace`,{
        params,
    ...options}
    );
  }


export const getGetFreeSpaceQueryKey = (params?: GetFreeSpaceParams,) => [`/freeSpace`, ...(params ? [params]: [])];

    
export const useGetFreeSpace = <TData = AsyncReturnType<typeof getFreeSpace>, TError = AxiosError<void>>(
 params?: GetFreeSpaceParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getFreeSpace>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetFreeSpaceQueryKey(params);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getFreeSpace>> = () => getFreeSpace(params, axiosOptions);

  const query = useQuery<AsyncReturnType<typeof getFreeSpace>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


/**
 * –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
 * @summary –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export const deleteCancelReservation = (
    params?: DeleteCancelReservationParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CancelReservationResponse>> => {
    return axios.delete(
      `/cancelReservation`,{
        params,
    ...options}
    );
  }



    export const useDeleteCancelReservation = <TError = AxiosError<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof deleteCancelReservation>, TError,{params?: DeleteCancelReservationParams}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof deleteCancelReservation>, {params?: DeleteCancelReservationParams}> = (props) => {
          const {params} = props || {};

          return  deleteCancelReservation(params,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof deleteCancelReservation>, TError, {params?: DeleteCancelReservationParams}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å–µ–∞–Ω—Å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞
 */
export const putChangeSessionTime = (
    putChangeSessionTimeBody: PutChangeSessionTimeBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookingPlaceResponse>> => {
    return axios.put(
      `/changeSessionTime`,
      putChangeSessionTimeBody,options
    );
  }



    export const usePutChangeSessionTime = <TError = AxiosError<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof putChangeSessionTime>, TError,{data: PutChangeSessionTimeBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof putChangeSessionTime>, {data: PutChangeSessionTimeBody}> = (props) => {
          const {data} = props || {};

          return  putChangeSessionTime(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof putChangeSessionTime>, TError, {data: PutChangeSessionTimeBody}, TContext>(mutationFn, mutationOptions)
    }
    
/**
 * –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ —Å–µ–∞–Ω—Å
 * @summary –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ
 */
export const postBookingPlace = (
    postBookingPlaceBody: PostBookingPlaceBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<BookingPlaceResponse>> => {
    return axios.post(
      `/bookingPlace`,
      postBookingPlaceBody,options
    );
  }



    export const usePostBookingPlace = <TError = AxiosError<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof postBookingPlace>, TError,{data: PostBookingPlaceBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof postBookingPlace>, {data: PostBookingPlaceBody}> = (props) => {
          const {data} = props || {};

          return  postBookingPlace(data,axiosOptions)
        }

      return useMutation<AsyncReturnType<typeof postBookingPlace>, TError, {data: PostBookingPlaceBody}, TContext>(mutationFn, mutationOptions)
    }
    


export const getGetFreeSpaceMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({idSession: faker.helpers.randomize([faker.datatype.number(), undefined]), idAuditorium: faker.helpers.randomize([faker.datatype.number(), undefined]), placeNumber: faker.helpers.randomize([faker.datatype.number(), undefined]), placeStatus: faker.helpers.randomize([faker.random.word(), undefined]), seatsInfo: faker.helpers.randomize([{}, undefined])})))

export const getDeleteCancelReservationMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({cancelReservationStatus: faker.helpers.randomize([faker.datatype.number(), undefined])})))

export const getPutChangeSessionTimeMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({idDeal: faker.helpers.randomize([faker.datatype.number(), undefined]), bookingStatus: faker.helpers.randomize([faker.random.word(), undefined])})))

export const getPostBookingPlaceMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({idDeal: faker.helpers.randomize([faker.datatype.number(), undefined]), bookingStatus: faker.helpers.randomize([faker.random.word(), undefined])})))

export const getApi–∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∏—Å–∫–æ—Ä–∫–∞MSW = () => [
rest.get('*/freeSpace', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetFreeSpaceMock()),
        )
      }),rest.delete('*/cancelReservation', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeleteCancelReservationMock()),
        )
      }),rest.put('*/changeSessionTime', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPutChangeSessionTimeMock()),
        )
      }),rest.post('*/bookingPlace', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostBookingPlaceMock()),
        )
      }),]
